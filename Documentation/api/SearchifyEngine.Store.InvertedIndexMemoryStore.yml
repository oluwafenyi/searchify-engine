### YamlMime:ManagedReference
items:
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore
  commentId: T:SearchifyEngine.Store.InvertedIndexMemoryStore
  id: InvertedIndexMemoryStore
  parent: SearchifyEngine.Store
  children:
  - SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  - SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed(System.String)
  - SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList(System.String)
  - SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId
  - SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId(System.UInt32)
  langs:
  - csharp
  - vb
  name: InvertedIndexMemoryStore
  nameWithType: InvertedIndexMemoryStore
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore
  type: Class
  source:
    remote:
      path: SearchifyEngine/Store/InvertedIndexMemoryStore.cs
      branch: master
      repo: https://github.com/oluwafenyi/searchify-engine.git
    id: InvertedIndexMemoryStore
    path: ../SearchifyEngine/Store/InvertedIndexMemoryStore.cs
    startLine: 7
  assemblies:
  - SearchifyEngine
  namespace: SearchifyEngine.Store
  syntax:
    content: 'public class InvertedIndexMemoryStore : IStore'
    content.vb: >-
      Public Class InvertedIndexMemoryStore

          Implements IStore
  inheritance:
  - System.Object
  implements:
  - SearchifyEngine.Store.IStore
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId
  commentId: M:SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId
  id: GetLastId
  parent: SearchifyEngine.Store.InvertedIndexMemoryStore
  langs:
  - csharp
  - vb
  name: GetLastId()
  nameWithType: InvertedIndexMemoryStore.GetLastId()
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId()
  type: Method
  source:
    remote:
      path: SearchifyEngine/Store/InvertedIndexMemoryStore.cs
      branch: master
      repo: https://github.com/oluwafenyi/searchify-engine.git
    id: GetLastId
    path: ../SearchifyEngine/Store/InvertedIndexMemoryStore.cs
    startLine: 17
  assemblies:
  - SearchifyEngine
  namespace: SearchifyEngine.Store
  summary: "\nReturns the id of last file indexed, zero if no file was indexed.\n"
  example: []
  syntax:
    content: public async Task<uint> GetLastId()
    return:
      type: System.Threading.Tasks.Task{System.UInt32}
      description: id of last file indexed
    content.vb: Public Function GetLastId As Task(Of UInteger)
  overload: SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId*
  implements:
  - SearchifyEngine.Store.IStore.GetLastId
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId(System.UInt32)
  commentId: M:SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId(System.UInt32)
  id: SetLastId(System.UInt32)
  parent: SearchifyEngine.Store.InvertedIndexMemoryStore
  langs:
  - csharp
  - vb
  name: SetLastId(UInt32)
  nameWithType: InvertedIndexMemoryStore.SetLastId(UInt32)
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId(System.UInt32)
  type: Method
  source:
    remote:
      path: SearchifyEngine/Store/InvertedIndexMemoryStore.cs
      branch: master
      repo: https://github.com/oluwafenyi/searchify-engine.git
    id: SetLastId
    path: ../SearchifyEngine/Store/InvertedIndexMemoryStore.cs
    startLine: 27
  assemblies:
  - SearchifyEngine
  namespace: SearchifyEngine.Store
  summary: "\nSets the value of the last document indexed\n"
  example: []
  syntax:
    content: public async Task<HttpStatusCode> SetLastId(uint lastId)
    parameters:
    - id: lastId
      type: System.UInt32
      description: document id
    return:
      type: System.Threading.Tasks.Task{System.Net.HttpStatusCode}
      description: status code for operation
    content.vb: Public Function SetLastId(lastId As UInteger) As Task(Of HttpStatusCode)
  overload: SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId*
  implements:
  - SearchifyEngine.Store.IStore.SetLastId(System.UInt32)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  commentId: M:SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  id: AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  parent: SearchifyEngine.Store.InvertedIndexMemoryStore
  langs:
  - csharp
  - vb
  name: AppendIndexTerm(String, IndexTerm)
  nameWithType: InvertedIndexMemoryStore.AppendIndexTerm(String, IndexTerm)
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm(System.String, SearchifyEngine.Indexer.IndexTerm)
  type: Method
  source:
    remote:
      path: SearchifyEngine/Store/InvertedIndexMemoryStore.cs
      branch: master
      repo: https://github.com/oluwafenyi/searchify-engine.git
    id: AppendIndexTerm
    path: ../SearchifyEngine/Store/InvertedIndexMemoryStore.cs
    startLine: 40
  assemblies:
  - SearchifyEngine
  namespace: SearchifyEngine.Store
  summary: "\nAppends to list of index terms for a particular term. If the term has not been indexed yet, a new list is\ninstantiated and the term is then appended\n"
  example: []
  syntax:
    content: public async Task<HttpStatusCode> AppendIndexTerm(string term, IndexTerm indexTerm)
    parameters:
    - id: term
      type: System.String
      description: term
    - id: indexTerm
      type: SearchifyEngine.Indexer.IndexTerm
      description: <xref href="SearchifyEngine.Indexer.IndexTerm" data-throw-if-not-resolved="false"></xref> object
    return:
      type: System.Threading.Tasks.Task{System.Net.HttpStatusCode}
      description: status code of operation
    content.vb: Public Function AppendIndexTerm(term As String, indexTerm As IndexTerm) As Task(Of HttpStatusCode)
  overload: SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm*
  implements:
  - SearchifyEngine.Store.IStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed(System.String)
  commentId: M:SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed(System.String)
  id: CheckTermIndexed(System.String)
  parent: SearchifyEngine.Store.InvertedIndexMemoryStore
  langs:
  - csharp
  - vb
  name: CheckTermIndexed(String)
  nameWithType: InvertedIndexMemoryStore.CheckTermIndexed(String)
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed(System.String)
  type: Method
  source:
    remote:
      path: SearchifyEngine/Store/InvertedIndexMemoryStore.cs
      branch: master
      repo: https://github.com/oluwafenyi/searchify-engine.git
    id: CheckTermIndexed
    path: ../SearchifyEngine/Store/InvertedIndexMemoryStore.cs
    startLine: 56
  assemblies:
  - SearchifyEngine
  namespace: SearchifyEngine.Store
  summary: "\nChecks if a term has been indexed\n"
  example: []
  syntax:
    content: public async Task<bool> CheckTermIndexed(string term)
    parameters:
    - id: term
      type: System.String
      description: term
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: true if term has been indexed, else false
    content.vb: Public Function CheckTermIndexed(term As String) As Task(Of Boolean)
  overload: SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed*
  implements:
  - SearchifyEngine.Store.IStore.CheckTermIndexed(System.String)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList(System.String)
  commentId: M:SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList(System.String)
  id: GetIndexTermList(System.String)
  parent: SearchifyEngine.Store.InvertedIndexMemoryStore
  langs:
  - csharp
  - vb
  name: GetIndexTermList(String)
  nameWithType: InvertedIndexMemoryStore.GetIndexTermList(String)
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList(System.String)
  type: Method
  source:
    remote:
      path: SearchifyEngine/Store/InvertedIndexMemoryStore.cs
      branch: master
      repo: https://github.com/oluwafenyi/searchify-engine.git
    id: GetIndexTermList
    path: ../SearchifyEngine/Store/InvertedIndexMemoryStore.cs
    startLine: 66
  assemblies:
  - SearchifyEngine
  namespace: SearchifyEngine.Store
  summary: "\nReturns index term list for a particular term. An empty list is returned if the term has not been indexed\n"
  example: []
  syntax:
    content: public async Task<List<IndexTerm>> GetIndexTermList(string term)
    parameters:
    - id: term
      type: System.String
      description: term
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.List{SearchifyEngine.Indexer.IndexTerm}}
      description: list of <xref href="SearchifyEngine.Indexer.IndexTerm" data-throw-if-not-resolved="false"></xref> objects
    content.vb: Public Function GetIndexTermList(term As String) As Task(Of List(Of IndexTerm))
  overload: SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList*
  implements:
  - SearchifyEngine.Store.IStore.GetIndexTermList(System.String)
  modifiers.csharp:
  - public
  - async
  modifiers.vb:
  - Public
references:
- uid: SearchifyEngine.Store
  commentId: N:SearchifyEngine.Store
  name: SearchifyEngine.Store
  nameWithType: SearchifyEngine.Store
  fullName: SearchifyEngine.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: SearchifyEngine.Store.IStore
  commentId: T:SearchifyEngine.Store.IStore
  parent: SearchifyEngine.Store
  name: IStore
  nameWithType: IStore
  fullName: SearchifyEngine.Store.IStore
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId*
  commentId: Overload:SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId
  name: GetLastId
  nameWithType: InvertedIndexMemoryStore.GetLastId
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.GetLastId
- uid: SearchifyEngine.Store.IStore.GetLastId
  commentId: M:SearchifyEngine.Store.IStore.GetLastId
  parent: SearchifyEngine.Store.IStore
  name: GetLastId()
  nameWithType: IStore.GetLastId()
  fullName: SearchifyEngine.Store.IStore.GetLastId()
  spec.csharp:
  - uid: SearchifyEngine.Store.IStore.GetLastId
    name: GetLastId
    nameWithType: IStore.GetLastId
    fullName: SearchifyEngine.Store.IStore.GetLastId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchifyEngine.Store.IStore.GetLastId
    name: GetLastId
    nameWithType: IStore.GetLastId
    fullName: SearchifyEngine.Store.IStore.GetLastId
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.UInt32}
  commentId: T:System.Threading.Tasks.Task{System.UInt32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<UInt32>
  nameWithType: Task<UInt32>
  fullName: System.Threading.Tasks.Task<System.UInt32>
  nameWithType.vb: Task(Of UInt32)
  fullName.vb: System.Threading.Tasks.Task(Of System.UInt32)
  name.vb: Task(Of UInt32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId*
  commentId: Overload:SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId
  name: SetLastId
  nameWithType: InvertedIndexMemoryStore.SetLastId
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.SetLastId
- uid: SearchifyEngine.Store.IStore.SetLastId(System.UInt32)
  commentId: M:SearchifyEngine.Store.IStore.SetLastId(System.UInt32)
  parent: SearchifyEngine.Store.IStore
  isExternal: true
  name: SetLastId(UInt32)
  nameWithType: IStore.SetLastId(UInt32)
  fullName: SearchifyEngine.Store.IStore.SetLastId(System.UInt32)
  spec.csharp:
  - uid: SearchifyEngine.Store.IStore.SetLastId(System.UInt32)
    name: SetLastId
    nameWithType: IStore.SetLastId
    fullName: SearchifyEngine.Store.IStore.SetLastId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchifyEngine.Store.IStore.SetLastId(System.UInt32)
    name: SetLastId
    nameWithType: IStore.SetLastId
    fullName: SearchifyEngine.Store.IStore.SetLastId
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.UInt32
  commentId: T:System.UInt32
  parent: System
  isExternal: true
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Threading.Tasks.Task{System.Net.HttpStatusCode}
  commentId: T:System.Threading.Tasks.Task{System.Net.HttpStatusCode}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<HttpStatusCode>
  nameWithType: Task<HttpStatusCode>
  fullName: System.Threading.Tasks.Task<System.Net.HttpStatusCode>
  nameWithType.vb: Task(Of HttpStatusCode)
  fullName.vb: System.Threading.Tasks.Task(Of System.Net.HttpStatusCode)
  name.vb: Task(Of HttpStatusCode)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Net.HttpStatusCode
    name: HttpStatusCode
    nameWithType: HttpStatusCode
    fullName: System.Net.HttpStatusCode
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Net.HttpStatusCode
    name: HttpStatusCode
    nameWithType: HttpStatusCode
    fullName: System.Net.HttpStatusCode
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchifyEngine.Indexer.IndexTerm
  commentId: T:SearchifyEngine.Indexer.IndexTerm
  parent: SearchifyEngine.Indexer
  name: IndexTerm
  nameWithType: IndexTerm
  fullName: SearchifyEngine.Indexer.IndexTerm
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm*
  commentId: Overload:SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm
  name: AppendIndexTerm
  nameWithType: InvertedIndexMemoryStore.AppendIndexTerm
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.AppendIndexTerm
- uid: SearchifyEngine.Store.IStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  commentId: M:SearchifyEngine.Store.IStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
  parent: SearchifyEngine.Store.IStore
  isExternal: true
  name: AppendIndexTerm(String, IndexTerm)
  nameWithType: IStore.AppendIndexTerm(String, IndexTerm)
  fullName: SearchifyEngine.Store.IStore.AppendIndexTerm(System.String, SearchifyEngine.Indexer.IndexTerm)
  spec.csharp:
  - uid: SearchifyEngine.Store.IStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
    name: AppendIndexTerm
    nameWithType: IStore.AppendIndexTerm
    fullName: SearchifyEngine.Store.IStore.AppendIndexTerm
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchifyEngine.Indexer.IndexTerm
    name: IndexTerm
    nameWithType: IndexTerm
    fullName: SearchifyEngine.Indexer.IndexTerm
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchifyEngine.Store.IStore.AppendIndexTerm(System.String,SearchifyEngine.Indexer.IndexTerm)
    name: AppendIndexTerm
    nameWithType: IStore.AppendIndexTerm
    fullName: SearchifyEngine.Store.IStore.AppendIndexTerm
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: SearchifyEngine.Indexer.IndexTerm
    name: IndexTerm
    nameWithType: IndexTerm
    fullName: SearchifyEngine.Indexer.IndexTerm
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: SearchifyEngine.Indexer
  commentId: N:SearchifyEngine.Indexer
  name: SearchifyEngine.Indexer
  nameWithType: SearchifyEngine.Indexer
  fullName: SearchifyEngine.Indexer
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed*
  commentId: Overload:SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed
  name: CheckTermIndexed
  nameWithType: InvertedIndexMemoryStore.CheckTermIndexed
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.CheckTermIndexed
- uid: SearchifyEngine.Store.IStore.CheckTermIndexed(System.String)
  commentId: M:SearchifyEngine.Store.IStore.CheckTermIndexed(System.String)
  parent: SearchifyEngine.Store.IStore
  isExternal: true
  name: CheckTermIndexed(String)
  nameWithType: IStore.CheckTermIndexed(String)
  fullName: SearchifyEngine.Store.IStore.CheckTermIndexed(System.String)
  spec.csharp:
  - uid: SearchifyEngine.Store.IStore.CheckTermIndexed(System.String)
    name: CheckTermIndexed
    nameWithType: IStore.CheckTermIndexed
    fullName: SearchifyEngine.Store.IStore.CheckTermIndexed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchifyEngine.Store.IStore.CheckTermIndexed(System.String)
    name: CheckTermIndexed
    nameWithType: IStore.CheckTermIndexed
    fullName: SearchifyEngine.Store.IStore.CheckTermIndexed
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Boolean}
  commentId: T:System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: System.Threading.Tasks.Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList*
  commentId: Overload:SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList
  name: GetIndexTermList
  nameWithType: InvertedIndexMemoryStore.GetIndexTermList
  fullName: SearchifyEngine.Store.InvertedIndexMemoryStore.GetIndexTermList
- uid: SearchifyEngine.Store.IStore.GetIndexTermList(System.String)
  commentId: M:SearchifyEngine.Store.IStore.GetIndexTermList(System.String)
  parent: SearchifyEngine.Store.IStore
  isExternal: true
  name: GetIndexTermList(String)
  nameWithType: IStore.GetIndexTermList(String)
  fullName: SearchifyEngine.Store.IStore.GetIndexTermList(System.String)
  spec.csharp:
  - uid: SearchifyEngine.Store.IStore.GetIndexTermList(System.String)
    name: GetIndexTermList
    nameWithType: IStore.GetIndexTermList
    fullName: SearchifyEngine.Store.IStore.GetIndexTermList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: SearchifyEngine.Store.IStore.GetIndexTermList(System.String)
    name: GetIndexTermList
    nameWithType: IStore.GetIndexTermList
    fullName: SearchifyEngine.Store.IStore.GetIndexTermList
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{System.Collections.Generic.List{SearchifyEngine.Indexer.IndexTerm}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.List{SearchifyEngine.Indexer.IndexTerm}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<List<IndexTerm>>
  nameWithType: Task<List<IndexTerm>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.List<SearchifyEngine.Indexer.IndexTerm>>
  nameWithType.vb: Task(Of List(Of IndexTerm))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.List(Of SearchifyEngine.Indexer.IndexTerm))
  name.vb: Task(Of List(Of IndexTerm))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: SearchifyEngine.Indexer.IndexTerm
    name: IndexTerm
    nameWithType: IndexTerm
    fullName: SearchifyEngine.Indexer.IndexTerm
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: SearchifyEngine.Indexer.IndexTerm
    name: IndexTerm
    nameWithType: IndexTerm
    fullName: SearchifyEngine.Indexer.IndexTerm
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
